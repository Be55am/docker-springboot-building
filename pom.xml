<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>guru.springframework</groupId>
	<artifactId>spring-boot-docker</artifactId>
	<version>0.0.2</version>
	<packaging>jar</packaging>

	<name>spring-boot-docker</name>
	<description>Spring Framework Guru Docker Course</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.1.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>

		<!--Set this to your docker account name-->
		<docker.image.prefix>bessam</docker.image.prefix>
		<!--Set the name of the project-->
		<docker.image.name>springbootdockertest</docker.image.name>
	</properties>

	<dependencies>

		<!--JMS DEPENDENCY-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jms</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>

		<!--testing deps-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.28.0</version>

				<configuration>
					<!--it can be different depending on the OS u are using-->
					<dockerHost>unix:///var/run/docker.sock</dockerHost>

					<verbose>true</verbose>
					<!--configuring the images-->
					<images>
						<!--rabbit mq image-->
						<image>
							<name>rabbitmq</name>
							<alias>rabbitmq</alias>
							<run>
								<ports>
									<port>5671</port>
									<port>5672</port>
									<port>4369</port>
									<port>25672</port>
								</ports>
								<!--wait for db to start-->
								<wait>
									<time>10000</time>
								</wait>
							</run>
						</image>
						<image>
							<!--here v in docker image prefix u can put the url to what u are publishing to-->
							<name>${docker.image.prefix}/${docker.image.name}</name>
							<build>
								<dockerFileDir>${project.basedir}/target/dockerfile/</dockerFileDir>

								<!--copies ur build artifacts the target directory-->
								<assembly>
									<descriptorRef>artifact</descriptorRef>
								</assembly>
								<tags>
									<tag>latest</tag>
									<tag>${project.version}</tag>
								</tags>
							</build>
							<!--RUNNING THE CONTAINER-->
							<run>
								<ports>
									<port>8080:8080</port>
								</ports>
								<links>
									<link>rabbitmq:rabbitmq</link>
								</links>
								<env>
									<SPRING_RABBITMQ_HOST>rabbitmq</SPRING_RABBITMQ_HOST>
								</env>

								<dependsOn>
									<container>rabbitmq</container>
								</dependsOn>
								<!--this one waits for the container to start and be ready-->
								<!--<wait>-->
									<!--<http>-->
										<!--<url>http://localhost:8080/health</url>-->
										<!--<method>GET</method>-->
										<!--<status>200..399</status>-->
									<!--</http>-->
									<!--<time>75000</time>-->
								<!--</wait>-->
							</run>
						</image>
					</images>
				</configuration>
				<executions>
					<!--these are two goals that runs befor and after the integration tests-->
					<execution>
						<id>start</id>
						<phase>pre-integration-test</phase>
						<goals>
							<!--build should be used to build the image-->
							<goal>build</goal>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>stop</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.gmavenplus</groupId>
				<artifactId>gmavenplus-plugin</artifactId>
				<version>1.5</version>
				<executions>
					<execution>
						<phase>prepare-package</phase>
						<goals>
							<goal>execute</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<scripts>
						<script>file:///${project.basedir}/src/main/scripts/buildDockerfile.groovy</script>
					</scripts>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.codehaus.groovy</groupId>
						<artifactId>groovy-all</artifactId>
						<!--any version of groovy would work-->
						<version>2.4.8</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
			</plugin>

			<!--The failsafe plugin for the tests-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.19.1</version>
				<executions>
					<!--a goal to run the it tests -->
					<execution>
						<id>integration-test</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	

</project>
